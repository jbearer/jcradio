<h2> Plots </h2>

<div id="plots">
    <div>
        <h3>
            Expected distribution after
            <input id="expected_distribution_turns" type=text value="1" style="width: 40px;" onchange="updateExpectedDistribution();">
            turns starting with
            <input id="expected_distribution_seed" type=text value="<%= $the_next_letter == "_" ? "A" : $the_next_letter %>" style="width: 40px;" onchange="updateExpectedDistribution()">
        </h3>
        <div id="expected_distribution"></div>
    </div>
</div>

<script>
    TESTER = document.getElementById('tester');

    var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split('');
    var markov = undefined;

    function normalizeTitle(title) {

        // Delete Paren phrases
        open_paren_i = title.indexOf('(');
        close_paren_i = title.indexOf(')');
        if ((open_paren_i != -1) && (close_paren_i != -1)) {
            title = title.slice(0, open_paren_i) + title.slice(close_paren_i+1)
        }
        // console.log(title);

        // Strip after hyphens
        hyphen_i = title.search(/[-â€“] /g)
        if (hyphen_i != -1) {
            title = title.slice(0, hyphen_i)
        }
        // console.log(title);

        // Upercase
        title = title.toUpperCase();
        // console.log(title);

        // Only Letters
        title = title.replace(/[^A-Z ]/g, '');
        // console.log(title);

        // Split into words
        words = title.split(" ");
        // console.log(words);

        if (!words.length) {
            return [];
        }

        // Trim articles
        articles = ["THE", "A", "AN", "UN", "UNE", "LE", "LES"];
        if (articles.includes(words[0])) {
            words.shift();
        }
        // console.log(words);

        return words;
    }

    function firstLetter(title) {
        normalized = normalizeTitle(title);
        if (normalized.length == 0) {
            return "_";
        } else if (normalized[0].length == 0) {
            return "_";
        }
        return normalized[0][0];
    }

    function generateLetterFreqData(queue_arr) {
        // Create map
        let letter_freq = new Map();
        alphabet.forEach(function (letter) {
            letter_freq.set(letter, 0);
        });
        // console.log(letter_freq)

        // Loop through Queue
        queue_arr.forEach(function (q_entry) {
            var first_letter = firstLetter(q_entry.song.title);
            letter_freq.set(first_letter, letter_freq.get(first_letter)+1);
        });

        // Create the trace
        var trace = {
            x: Array.from(letter_freq.keys()),
            y: Array.from(letter_freq.values()),
            type: "bar"
        };

        return [trace];
    }

    // Returns an object `m` where `m[l1][l2]` is P(l2|l1).
    function generateMarkovModel(q) {
        // Create an empty dictionary of the form letter1 -> letter2 -> frequency.
        markov = {};
        alphabet.forEach((letter1) => {
            markov[letter1] = {};
            alphabet.forEach((letter2) => {
                markov[letter1][letter2] = 0;
            });
        });

        // Count the first-letter/next-letter pairs.
        q.forEach((e) => {
            if (alphabet.includes(e.song.first_letter) &&
                alphabet.includes(e.song.next_letter))
            {
                ++markov[e.song.first_letter][e.song.next_letter];
            }
        });

        // Normalize the counts to probabilities.
        alphabet.forEach((letter1) => {
            counts = markov[letter1];
            total = Object.values(counts).reduce((x, y) => x + y, 0);
            alphabet.forEach((letter2) => {
                if (total) {
                    counts[letter2] /= total;
                }
            });
        });

        return markov;
    }

    function projectedLetterDistribution(markov, seedLetter, turns=1) {
        Pn_1 = markov[seedLetter]
        for (var i = 1; i < turns; ++i) {
            Pn = {};

            // The probability Pn(l) that we get a letter `l` after `n` turns is given by
            //  P{n-1}(A)P(l|A) + P{n-1}(B)P(l|B) + ...
            alphabet.forEach((l) => {
                Pn[l] = alphabet
                    .map((letter) => Pn_1[letter] * markov[letter][l])
                    .reduce((p1, p2) => p1 + p2, 0);
            });

            Pn_1 = Pn;
        }

        return Pn_1;
    }

    function whatLetterShouldIGive(desiredLetter, turns=1) {
        best_letter = undefined
        best_probability = undefined
        alphabet.forEach((letter) => {
            probability = projectedLetterDistribution(markov, letter, turns)[desiredLetter];
            if (best_probability === undefined || probability > best_probability) {
                best_probability = probability;
                best_letter = letter;
            }
        });

        return [best_letter, best_probability];
    }

    function generateMarkovData(markov) {
        data = [];
        alphabet.slice().reverse().forEach((letter2) => {
            p = [];
            alphabet.forEach((letter1) => {
                p.push(markov[letter1][letter2])
            });
            data.push({
                x: alphabet,
                y: p,
                name: letter2,
                type: "bar"
            })
        });

        return data;
    }

    function generateExpectedDistributionData(markov, seedLetter, turns) {
        distribution = projectedLetterDistribution(markov, seedLetter, turns);
        return [{
            x: alphabet,
            y: alphabet.map((letter) => distribution[letter]),
            type: "bar"
        }];
    }

    function updateExpectedDistribution() {
        Plotly.newPlot(
            $("#expected_distribution")[0],
            generateExpectedDistributionData(
                markov,
                $("#expected_distribution_seed").val(),
                $("#expected_distribution_turns").val()
            )
        );
    }

    $.get("/stations/1/plots.json", {}, (queue_arr) => {
        console.log("QueueArr:", queue_arr);
        markov = generateMarkovModel(queue_arr);

        // Actually plot the data
        Plotly.newPlot(
            $("<div>").appendTo($("#plots"))[0],
            generateLetterFreqData(queue_arr)
        );
        Plotly.newPlot(
            $("<div>").appendTo($("#plots"))[0],
            generateMarkovData(markov), {
                title: "Next Letter Probability by First Letter",
                barmode: "stack"
            }
        );
        updateExpectedDistribution();
    });

</script>

Welcome to the most awesomest plots page! typo
